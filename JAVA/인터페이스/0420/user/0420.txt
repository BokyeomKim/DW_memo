
~상속~
(객체지향특징)

상속을 하는 이유?

마라토너 패키지가 있다고 가정

선수 A 뛰다() 급여를 받다()
선수 B 뛰다() 급여를 받다()
선수 C 뛰다() 급여를 받다()


상속을 이용해서 뛰다를 ***공통으로 처리

운동기능{
뛰다()
}
급여{
급여를 받다()
}



선수 A extends 기능 {
	뛰다()<- 부모클래스에 있는 메소드임
}
상속을 하면 부모크랠스 메소드를 사용할 수 있다 

모든 클래스의 부모클래스는 Object

-- 자바 상속 한계
*자바,자바스크립트는 다중상속이 불가능
C++ 다중 상속허용

-다중상속이 불가능 하면 어떤 일? 

-** 다중 상속을 받는 법!
프로젝트가 커지면 커질수록 ***다중상속 많이 사용~

- 자바, 자바스크립트에서 ****인터페이스를 제공해줌
- 인터페이스로 마치 다중상속을 받은 것 처럼 사용할 수 있다.

*** 4/20 인터페이스 수업!
*** 추상화 개념
	공통적으로 사용하는 기능을 따로 정의.
*** 추상클래스 , 메소드 
-추상클래스는 abstract 키워드로 선언된 클래스
 추상클래스에는 일반메소드, 추상메소드를 정의할 수 있다.

**추상 : 공통 기능


- 추상메소드는 구현이 목적이 아님.
- 추상클래스는 new 로 호출(인스턴스화) 할 수 없다.
- ***추상메소드가 있는 추상클래스를 상속받으면 무조건 오버라이딩을 해야함

**추상클래스 한계
-> 클래스이기에 다중상속 x 


**인터페이스
데이터를 제공하는 규격
(공통기능을 제공하는 것)

인터페이스는 다중상속을 제공
인터페이스를 상속받으면 무조건 오버라이딩을 해야함
인터페이스 안에 있는 모든 메소드는
모두 추상 메소드다
추상메소드는 public 이어야 한다.


A 프로젝트 :
과장 1 (테이블 설계, 인터페이스 설계, 클라이언트 요구사항 정리)
 (코드 구현 : 핵심 로직)
대리 1 (소스통합&배포)
사원 2 (코드 구현)




package user;

import java.util.List;

public interface UserServiceImple {
	public List<UserVO> updateSal(List<UserVO> list, String dname);
	public List<UserVO> updateLv(List<UserVO> list);
	public List<UserVO> deleteUser(List<UserVO> list, int lv);
	public UserVO selectUserByEname(List<UserVO> list, String ename);
}
